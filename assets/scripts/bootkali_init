#!/system/bin/sh

if [ -x /system/xbin/busybox_nh ]; then
	busybox=/system/xbin/busybox_nh
elif [ -x /sbin/busybox_nh ]; then
	busybox=/sbin/busybox_nh
elif [ -x /system/xbin/busybox ]; then
	busybox=/system/xbin/busybox
elif [ -x /data/local/bin/busybox ]; then
	busybox=/data/local/bin/busybox
elif [ -x /system/bin/busybox ]; then
	busybox=/system/bin/busybox
elif [ -x /su/bin/busybox ]; then
	busybox=/su/bin/busybox
else
	echo "Busybox not found!  Install it, dummy!"
	log "Busybox not found!  Install it, dummy!"
	exit 1
fi

## Not need to manually set to permissive mode now.
#su -c setenforce 0

######### CHECK FOR ROOT #########
f_checkforroot(){
	perm=$(id | $busybox cut -b 5)
	if [ "$perm" != "0" ]; then
		echo "ROOT NOT DETECTED! Type: su or install SuperSU to fix"
		exit 1
	fi
}

######### VARIABLES #########
mnt=/data/local/nhsystem/kali-armhf
nhsys=/data/local/nhsystem

######### CHECK FOR INSTALL #########
#
# There is a bug that will create the resolv.conf
# If we continue on with bootkali even after we
# remove chroot.  So stop here if removed or else
# chroot is never uninstalled.

###### SYSFILE CREATION #######
#
# Responsible for creating files which are not found in Android,
# but are needed in Kali.

if [ ! -e "/dev/stdin" -o ! -e "/dev/stdout" -o ! -e "/dev/stderr" ]; then
	[ -e "/dev/stdin" ] || ln -s /proc/self/fd/0 /dev/stdin
	[ -e "/dev/stdout" ] || ln -s /proc/self/fd/1 /dev/stdout
	[ -e "/dev/stderr" ] || ln -s /proc/self/fd/2 /dev/stderr
fi

## First create the chroot directory: $mnt
if [ ! -d "$mnt" ]; then
    mkdir -p $mnt
fi

## then check if the kali chroot image is already mount to /data/local/nhsystem/kali-armhf

$busybox mountpoint -q "$mnt" || $busybox mount -t ext4 -o loop /sdcard/kali-chroot.img $mnt && echo "Kali chroot is successfully mounted."

if [ ! -d "$mnt/dev" ]; then
    mkdir -p $mnt/dev
fi

if [ ! -d "$mnt/proc" ]; then
    mkdir -p $mnt/proc
fi

if [ ! -d "$mnt/sys" ]; then
    mkdir -p $mnt/sys
fi

if [ ! -d "$mnt/usr" ]; then
    echo "Missing a required folder. Something isn't right"
    exit 1
fi

######### SET TUN ########
mkdir -p /dev/net
rm -f /dev/net/tun

# This appears to work with miredo
mknod /dev/net/tun c 10 200

# ln -s /dev/tun /dev/net/tun 2> /dev/null

######### SET DNS ########
> $mnt/etc/resolv.conf # empty dns entries

for i in 1 2 3 4; do
	if [ -z "$(getprop net.dns${i})" ]; then
		# we go through 1-4 dns servers and break out of loop on empty
		break
	else
		# add local/device dns server first
		echo "nameserver $(getprop net.dns${i})" >> $mnt/etc/resolv.conf
	fi
done

# lastly add two default dns entries
echo "nameserver 208.67.222.222" >> $mnt/etc/resolv.conf
echo "nameserver 208.67.220.220" >> $mnt/etc/resolv.conf
chmod 644 $mnt/etc/resolv.conf

######### MOUNT #########

## Should run always (https://su.chainfire.eu/#how-mount)

$busybox mount -o remount,suid /data

if [ ! -d $mnt/sdcard ]; then
    mkdir -p $mnt/sdcard
fi

mount_sdcard() {
	mountpoint -q "$mnt/sdcard" && return 0

	for sdcard in \
		"$EXTERNAL_STORAGE" \
		/storage/emulated/0 \
		/storage/emulated/legacy \
		/storage/sdcard0 \
		/sdcard
	do
		[ -d "$sdcard" ] &&
			$busybox mount -o bind "$sdcard" "$mnt/sdcard" &&
				return 0
	done
	return 1
}

mount_external_sd() {
	mountpoint -q "$mnt/external_sd" && return 0

	for external_sd in \
		/storage/extSdCard \
		/storage/sdcard1 \
		/storage/external_sd \
		/external_sd
	do
		[ -d "$external_sd" ] &&
			$busybox mount -o bind "$external_sd" "$mnt/external_sd" &&
				return 0
	done
	return 1
}

mount_usbdisk() {
	mountpoint -q "$mnt/mnt/usbdisk" && return 0

	for usbdisk in /storage/usb*; do
		[ -d "$usbdisk" ] &&
			$busybox mount -o bind "$usbdisk" "$mnt/mnt/usbdisk" &&
				return 0
	done
	return 1
}

mount_external_storage() {
	external_sd_mounted=false
	usbdisk_mounted=false
	mount_external_sd && external_sd_mounted=true
	mount_usbdisk && usbdisk_mounted=true

	# try marshmallow storage names
	for storage in /storage/*-*; do
		# if both mount successfully then skip
		$external_sd_mounted && $usbdisk_mounted && return
		if [ -d "$storage" ]; then
			if ! $external_sd_mounted; then
				$busybox mount -o bind "$storage" "$mnt/external_sd" &&
					external_sd_mounted=true
			elif ! $usbdisk_mounted; then
				$busybox mount -o bind "$storage" "$mnt/usbdisk" &&
					usbdisk_mounted=true
			fi
		fi
	done
}

# If chroot's /dev is mounted, assume the chroot is already running and skip initialization
if ! $busybox mountpoint -q $mnt/dev; then
	f_checkforroot

	if [ ! -d $mnt/system ]; then
        mkdir -p $mnt/system
	fi
	$busybox mount -r -o bind /system $mnt/system

	# enable depmod/modprobe support in rootfs
	$busybox mount -r -o bind /system/lib/modules $mnt/lib/modules

	mount_sdcard
	mount_external_storage

	$busybox mount -o bind /dev $mnt/dev
	$busybox mount -t devpts devpts $mnt/dev/pts
	$busybox mount -t proc proc $mnt/proc
	$busybox mount -t sysfs sysfs $mnt/sys

	$busybox chmod 666 /dev/null

	# SET 250MB TO ALLOW POSTGRESQL #
	$busybox sysctl -w kernel.shmmax=268435456

	# NETWORK SETTINGS #
	$busybox sysctl -w net.ipv4.ip_forward=1
	echo "127.0.0.1		 localhost kali" > $mnt/etc/hosts
	echo "::1				 localhost ip6-localhost ip6-loopback" >> $mnt/etc/hosts
	echo "kali" > $mnt/proc/sys/kernel/hostname

	echo "The Kali chroot has been started."
	log "The Kali chroot has been started."
else
	echo "The Kali chroot is already running!"
fi
