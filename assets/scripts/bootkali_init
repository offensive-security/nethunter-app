#!/system/bin/sh

if [ -x /system/xbin/busybox_nh ]; then
	busybox=/system/xbin/busybox_nh
elif [ -x /sbin/busybox_nh ]; then
	busybox=/sbin/busybox_nh
elif [ -x /system/xbin/busybox ]; then
	busybox=/system/xbin/busybox
elif [ -x /data/local/bin/busybox ]; then
	busybox=/data/local/bin/busybox
elif [ -x /system/bin/busybox ]; then
	busybox=/system/bin/busybox
elif [ -x /su/bin/busybox ]; then
	busybox=/su/bin/busybox
else
	echo "Busybox not found!  Install it, dummy!"
	log "Busybox not found!  Install it, dummy!"
	exit 1
fi


## No longer needed as SELinux is set to permissive mode via "10setenforce" init script.
#su -c 'setenforce 0'


######### CHECK FOR ROOT #########
f_checkforroot(){
	perm=$(id | $busybox cut -b 5)
	if [ "$perm" != "0" ]; then
		echo "ROOT NOT DETECTED! Type: Please install SuperSU or Magisk to fix it."
		exit 1
	fi
}

######### VARIABLES #########
mnt=/data/local/nhsystem/kali-armhf
nhsys=/data/local/nhsystem

######### CHECK FOR INSTALL #########
# There is a bug that will create the resolv.conf
# If we continue on with bootkali even after we
# remove chroot.  So stop here if removed or else
# chroot is never uninstalled.

####### SYSFILE CREATION #######
# Responsible for creating files which are not found in Android,
# but are needed in Kali.

if [ ! -e "/dev/stdin" -o ! -e "/dev/stdout" -o ! -e "/dev/stderr" ]; then
	[ -e "/dev/stdin" ] || ln -s /proc/self/fd/0 /dev/stdin
	[ -e "/dev/stdout" ] || ln -s /proc/self/fd/1 /dev/stdout
	[ -e "/dev/stderr" ] || ln -s /proc/self/fd/2 /dev/stderr
fi


######### MOUNT #########
mount_sdcard() {
	mountpoint -q "$mnt/sdcard" && return 0

	for sdcard in \
		"$EXTERNAL_STORAGE" \
		/storage/emulated/0 \
		/storage/emulated/legacy \
		/storage/sdcard0 \
		/sdcard
	do
		[ -d "$sdcard" ] &&
			$busybox mount -o bind "$sdcard" "$mnt/sdcard" &&
				return 0
	done
	return 1
}

mount_external_sd() {
	mountpoint -q "$mnt/external_sd" && return 0

	for external_sd in \
		/storage/extSdCard \
		/storage/sdcard1 \
		/storage/external_sd \
		/external_sd
	do
		[ -d "$external_sd" ] &&
			$busybox mount -o bind "$external_sd" "$mnt/external_sd" &&
				return 0
	done
	return 1
}

mount_usbdisk() {
	mountpoint -q "$mnt/mnt/usbdisk" && return 0

	for usbdisk in /storage/usb*; do
		[ -d "$usbdisk" ] &&
			$busybox mount -o bind "$usbdisk" "$mnt/mnt/usbdisk" &&
				return 0
	done
	return 1
}

mount_external_storage() {
	external_sd_mounted=false
	usbdisk_mounted=false
	mount_external_sd && external_sd_mounted=true
	mount_usbdisk && usbdisk_mounted=true

	# try marshmallow storage names
	for storage in /storage/*-*; do
		# if both mount successfully then skip
		$external_sd_mounted && $usbdisk_mounted && return
		if [ -d "$storage" ]; then
			if ! $external_sd_mounted; then
				$busybox mount -o bind "$storage" "$mnt/external_sd" &&
					external_sd_mounted=true
			elif ! $usbdisk_mounted; then
				$busybox mount -o bind "$storage" "$mnt/usbdisk" &&
					usbdisk_mounted=true
			fi
		fi
	done
}

mount_kali_chroot() {

    $busybox mount -t ext4 -o loop /sdcard/kali-chroot.img $mnt

    mkdir -p $mnt/dev
    mkdir -p $mnt/dev/shm
    mkdir -p $mnt/proc
    mkdir -p $mnt/sys
    mkdir -p $mnt/system
    mkdir -p $mnt/sdcard

    ######### SET TUN ########
    mkdir -p /dev/net
    rm -f /dev/net/tun

    # This appears to work with miredo
    mknod /dev/net/tun c 10 200

    # ln -s /dev/tun /dev/net/tun 2> /dev/null

    ######### SET DNS ########
    > $mnt/etc/resolv.conf # empty dns entries

    for i in 1 2 3 4; do
    	if [ -z "$(getprop net.dns${i})" ]; then
    		# we go through 1-4 dns servers and break out of loop on empty
    		break
    	else
    		# add local/device dns server first
    		echo "nameserver $(getprop net.dns${i})" >> $mnt/etc/resolv.conf
    	fi
    done

    # lastly add two default dns entries
    echo "nameserver 208.67.222.222" >> $mnt/etc/resolv.conf
    echo "nameserver 208.67.220.220" >> $mnt/etc/resolv.conf
    chmod 644 $mnt/etc/resolv.conf

    ######### MOUNTING FILESYSTEM IN CHROOT #########
    f_checkforroot

    ######### REMOUNT DATA ########
    $busybox mount -o remount,suid /data

    ######### MOUNT DEV ########
    if [ ! "$(mountpoint $mnt/dev 2> /dev/null | grep 'is a')" ]; then
        [ ! -d $mnt/dev ] && mkdir -p $mnt/dev
        $busybox mount -o bind /dev $mnt/dev && bklog "[+] mounted /dev"
    fi

    ######### MOUNT DEV PTS ########
    if [ ! "$(mountpoint $mnt/dev/pts 2> /dev/null | grep 'is a')" ]; then
        $busybox mount -t devpts devpts $mnt/dev/pts && bklog "[+] mounted /dev/pts"
    fi
    
    ######### MOUNT DEV SHM ########
    if [ ! "$(mountpoint $mnt/dev/shm 2> /dev/null | grep 'is a')" ]; then
        $busybox mount -t tmpfs tmpfs $mnt/dev/shm && bklog "[+] mounted /dev/shm"
    fi

    ######### MOUNT PROC ########
    if [ ! "$(mountpoint $mnt/proc 2> /dev/null | grep 'is a')" ]; then
        [ ! -d $mnt/proc ] && mkdir -p $mnt/proc
        $busybox mount -t proc proc $mnt/proc && bklog "[+] mounted /proc"
    fi

  	######### MOUNT SYS ########
    if [ ! "$(mountpoint $mnt/sys 2> /dev/null | grep 'is a')" ]; then
        [ ! -d $mnt/sys ] && mkdir -p $mnt/sys
        $busybox mount -t sysfs sys $mnt/sys && bklog "[+] mounted /sys"
    fi

    ######### MOUNT SYSTEM ########
    if [ ! "$(mountpoint $mnt/system 2> /dev/null | grep 'is a')" ]; then
        [ ! -d $mnt/system ] && mkdir -p $mnt/system
        $busybox mount -r -o bind /system $mnt/system && bklog "[+] mounted /system"
    fi

    #enable depmod/modprobe support in rootfs
    if [ ! "$(mountpoint $mnt/lib/modules 2> /dev/null | grep 'is a')" ]; then
       $busybox mount -r -o bind /system/lib/modules $mnt/lib/modules && bklog "[+] mounted /lib/modules"
    fi

    ######### MOUNT INTERNAL | EXTERNAL SDCARD | USBDISK ########
    mount_sdcard
    mount_external_sd

    #########
    $busybox chmod 666 /dev/null

    ######### SET 250MB TO ALLOW POSTGRESQL #########
    $busybox sysctl -w kernel.shmmax=268435456

    ######### SET DNS ########
    > $mnt/etc/resolv.conf # empty dns entries
    for i in 1 2 3 4; do
        if [ -z "$(getprop net.dns${i})" ]; then
        # we go through 1-4 dns servers and break out of loop on empty
            break
        else
        # add local/device dns server first
            echo "nameserver $(getprop net.dns${i})" >> $mnt/etc/resolv.conf
        fi
    done

    $busybox chmod 666 /dev/null

    # SET 250MB TO ALLOW POSTGRESQL #
    $busybox sysctl -w kernel.shmmax=268435456

    # NETWORK SETTINGS #
    $busybox sysctl -w net.ipv4.ip_forward=1
    echo "127.0.0.1		 localhost kali" > $mnt/etc/hosts
    echo "::1				 localhost ip6-localhost ip6-loopback" >> $mnt/etc/hosts
    echo "kali" > $mnt/proc/sys/kernel/hostname
    echo "The Kali chroot has been started."
    if [ -f /sdcard/nh_files/debug ]; then
        echo " [!] Everytime you mount the kali chroot, please press ENTER to continue. (If chroot is already mounted, this won't prompt.)"
        read
    fi
    log "The Kali chroot has been started."

}

############ STARTING ############
## First create the chroot directory: $mnt
if [ ! -d "$mnt" ]; then
    mkdir -p $mnt
fi

## then check if the kali chroot image is already mounted on /data/local/nhsystem/kali-armhf

if [ ! "$($busybox mountpoint $mnt | grep 'is a')" ]; then
    echo "Mounting kali chroot..."
    mount_kali_chroot
else
    echo "Kali chroot is already mounted."

    if [ -d "$mnt/usr" ]; then
        echo "The Kali chroot should be already running!"
    else
        echo "But missing a required folder. Something isn't right here...Unmounting kali chroot.."
        $busybox umount $mnt
        exit 1
    fi
fi
