#!/system/bin/sh

SCRIPT_PATH=$(readlink -f $0)
. ${SCRIPT_PATH%/*}/bootkali_log

if [ -x /system/xbin/busybox_nh ]; then
	busybox=/system/xbin/busybox_nh
elif [ -x /sbin/busybox_nh ]; then
	busybox=/sbin/busybox_nh
elif [ -x /system/xbin/busybox ]; then
	busybox=/system/xbin/busybox
elif [ -x /data/local/bin/busybox ]; then
	busybox=/data/local/bin/busybox
elif [ -x /system/bin/busybox ]; then
	busybox=/system/bin/busybox
elif [ -x /su/bin/busybox ]; then
	busybox=/su/bin/busybox
elif [ -x /data/adb/magisk/busybox ]; then
	busybox=/data/adb/magisk/busybox
elif [ -x /sbin/busybox ]; then
	busybox=/sbin/busybox
elif [ -x /sbin/.magisk/busybox/busybox ]; then
	busybox=/sbin/.magisk/busybox/busybox
else
        bklog "[-] Busybox not found! Install it, dummy!"
	exit
fi

export bin=/system/bin
export mnt=/data/local/nhsystem/kali-armhf
PRESERVED_PATH=$PATH
export PATH=/usr/bin:/usr/sbin:/bin:/usr/local/bin:/usr/local/sbin:$PATH
export TERM=linux
export HOME=/root
export LOGNAME=root
export chroot_image=/sdcard/kali-chroot.img
unset LD_PRELOAD

########## Kill all running kali services ##########
f_kill_service() {
	bklog "[!] Killing all running kali services.."
	## set shmmax to 128mb to free memory ##
	$busybox sysctl -w kernel.shmmax=134217728
	$busybox chmod 666 /dev/null

	bklog "[!] Shutting down SSH Server"
	$busybox chroot $mnt /etc/init.d/ssh stop

	bklog "[!] Shutting down Postgresql"
	$busybox chroot $mnt /etc/init.d/postgresql stop

	bklog "[!] Shutting down Vncserver"
	pkill Xtightvnc
	rm -f $mnt/root/.vnc/*.log *.pid > /dev/null 2>&1
	rm -f $mnt/tmp/.X*-.lock .X*-unix/* > /dev/null 2>&1
}

########## Kill all running kali terminals ##########
f_kill_pids() {
	bklog "[!] Killing all running kali terminals.."
    local lsof_full=$(lsof | awk '{print $1}' | grep -c '^lsof')
    if [ "${lsof_full}" -eq 0 ]; then
        local pids=$(lsof | grep "$mnt" | awk '{print $1}' | uniq)
    else
        local pids=$(lsof | grep "$mnt" | awk '{print $2}' | uniq)
    fi
    if [ -n "${pids}" ]; then
        kill -9 ${pids} 2> /dev/null
        return $?
    fi
    return 0
}


########## umount the fs one by one ##########
f_umount_fs() {
	$busybox umount -f $mnt/$1 && bklog "[+] umounted $mnt/$1" || bklog "[-] failed to umounted $mnt/$1"
	[ "$1" != "dev/pts" ] && rmdir $mnt/$1 && bklog "[+] removed $mnt/$1"
}

########## umount if chroot directory is NOT a mountpoint(directory method) ##########
f_dir_umount() {
	f_kill_service
	f_kill_pids
	bklog "[!] Removing all fs mounts.."
	fs=(dev/pts dev/shm dev proc sys sdcard)
	for i in "${fs[@]}"; do
		f_umount_fs "$i"
	done
	[ -e $mnt/dev/null ] && bklog "[!] Found orphen $mnt/dev/null" && rm -f $mnt/dev/null && bklog "[+] removed $mnt/dev/null" && f_umount_fs dev
}

########## umount if chroot directory iss a mountpoint(File method) ##########
f_img_umount() {
	f_kill_service
	f_kill_pids
	 "[!] Removing all fs mounts.."
	fs=(dev/pts dev proc sys sdcard)
	for i in "${fs[@]}"; do
		f_umount_fs "$i"
	done
	[ -e $mnt/dev/null ] && bklog "[!] Find orphen $mnt/dev/null" && rm -f $mnt/dev/null && bklog "[+] removed $mnt/dev/null"
	if [ "$(losetup -a | grep $chroot_image)" ]; then
		if [ "$($busybox umount $mnt 2>&1 > /dev/null)" ]; then
			bklog "[-] Unable to umount the kali chroot image."
	        bklog "[!] If so, please try to close all the kali terminals first, secondly manually umount all the mointpoints on kali chroot, and lastly kill all the running services like ssh, vnc, webservice etc..."
		else
			bklog "[+] umounted kali-armhf"
		fi
	fi

	# Run e2fsck everytime we umount the kali chroot image on enrypted device.
	if [ -f "$chroot_image" ]; then
		bklog "[!] Running e2fsck to check image $chroot_image.."
		e2fsck -y $chroot_image
	fi

	# Check again if chroot image is really umounted.
	if [ "$(losetup -a | grep $chroot_image)" ]; then
		bklog "[!] $mnt is still being mounted. Something is wrong!" && read
	fi
}   rmdir $mnt/mnt
fi

########## Check if "kali-armhf" directory is a mountpoint ##########
f_is_mntpoint() {
	if [ -d "$mnt" ]; then
		mountpoint -q "$mnt" && return 0
		return 1
	fi
}

 ##################################
########## Main Script ###########
##################################

f_is_mntpoint
res=$?
case $res in
0)
	bklog "[!] $mnt is a mountpoint"
	f_img_umount
	;;
1)
	bklog "[!] $mnt is NOT a mountpoint"
	f_dir_umount
	;;
*)
	bklog "[!] $mnt directory is not existed!!! Aborting.."
	exit 1
esac

export PATH=$PRESERVED_PATH
